@startuml
title "Lab 8 - Running solution on Kubernetes"
node PC {

    node DefaultKuberentesCluster{

        node ingress as IngressFrontend { 
        } 

        node ingress as IngressBackend{
        }

        artifact HorizontalAutoScaler as HASBackend

        artifact Deployment as DeploymentBackend

        node service as ServiceFrontend{
        }

        artifact Deployment as DeploymentFrontend

        node service as ServiceBackend{
        }

        artifact Deployment as DeploymentBroker

        node service as ServiceBroker{
        }

        node "VM ControlPanel Node"  as MinikubeNode{
            artifact config as ConfigApp

            node pod as BackendPod {
                node docker as BackendDocker{
                    artifact backend
                }
            }
            node pod as FrontendPod{
                node docker as FrontDocker{
                    artifact frontend
                }
            }
            node pod as RabbitMQPod {
                node docker as RabbitMQDocker{
                    artifact rabbitmq
                }
            }
        }
        node "VM Worker Node" as MinikubeNode1{
            node pod as BackendPod1{
                node docker as BackendDocker1{
                    artifact backend1
                }
            }
            node pod as FrontendPod1{
                node docker as FrontDocker1{
                    artifact frontend1
                }
            }
        }
    }

    node TestingCluster {
        node service as ServiceTest 
        artifact config as ConfigTestApp
        node "VM ControlPanel" as TestingProfile1{
            node pod as TestingPod1{
                node docker as TestingDocker1{
                    artifact "testing-app" as testingapp1
                }
            }
            node pod as TestingPod2{
                node docker as TestingDocker2{
                    artifact "testing-app" as testingapp2
                }
            }
        }


        node "VM ControlPanel" as TestingProfile2{
            node pod as TestingPod3{
                node docker as TestingDocker3{
                    artifact "testing-app" as testingapp3
                }
            }
            node pod as TestingPod4{
                node docker as TestingDocker4{
                    artifact "testing-app" as testingapp4
                }
            }
        }
    }
}

IngressFrontend --> ServiceFrontend: send traffic
IngressBackend --> ServiceBackend: send traffic

HASBackend -> DeploymentBackend
DeploymentBackend --> ServiceBackend

ServiceBackend --> backend
ServiceBackend --> backend1

DeploymentFrontend --> ServiceFrontend

ServiceFrontend --> frontend
ServiceFrontend --> frontend1

DeploymentBroker --> ServiceBroker
ServiceBroker --> rabbitmq

frontend -> backend: ws://api.chat-test.com

note top of IngressBackend
Maps api.chat-test.com into service
endnote

note top of IngressFrontend
Maps chat-test.com into service
endnote


note "env:\nPORT execution port\nUse service name to talk to rabbitmq\nUsing: amqp://guest:gest@rabbitmq" as backend_note

backend .. backend_note
backend1 .. backend_note

note "env var:\nPORT execution port\nREACT_APP_WS_DOMAIN WebSocket domain if any" as frontend_note

frontend .. frontend_note
frontend1 .. frontend_note

ServiceTest --> testingapp1
ServiceTest --> testingapp2
ServiceTest --> testingapp3
ServiceTest --> testingapp4

@enduml
